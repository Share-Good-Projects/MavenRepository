apply plugin: 'com.android.library'

android {
    compileSdkVersion 28



    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.getName().toLowerCase()}-${variant.name}-${version}.aar"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

def destinationOutputDir = 'build/outputs/aar'

task sourcesJar(type: Jar) {
    classifier = 'sources'
    destinationDir = file('build/outputs/jar')
    from android.sourceSets.main.java.srcDirs
}

apply plugin: 'maven-publish'
publish.dependsOn(sourcesJar, assemble)

afterEvaluate {
    android.libraryVariants.each { variant ->
        publishing.publications.create "${variant.name}", MavenPublication, {
            groupId "${group}"
            version "${version}"
            artifactId "${project.name}-${variant.name}"
            artifact "${destinationOutputDir}/${project.name}-${variant.name}-${version}.aar"
            artifact sourcesJar {
                classifier "sources"
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    addPomDependencies(it, dependenciesNode, variant.name)
                }
            }
        }
    }
}

publishing {
    if (project.hasProperty('mavenUsernameNexus') && project.hasProperty('mavenPasswordNexus')) {
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "http://nexus.hrbing.com/nexus/content/repositories/snapshots/"
                } else {
                    credentials {
                        username project.mavenUsernameNexus
                        password project.mavenPasswordNexus
                    }
                    url "http://nexus.hrbing.com/nexus/content/repositories/releases/"
                }
            }
        }
    }
}

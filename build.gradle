// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.3'
        

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

def getGitDescribe = { ->
    // Keeping the old way for snapshot until we have the jobs ready for FDM2.0;
    return 'git describe --tags --dirty'.execute().text.trim()
}

def getModuleGitDescribe(moduleTag) {
    // Command to get the version name from tag
    // we have to sort the tag based on module name and find the first item in the list.
    def p = "git tag -l --sort=-refname $moduleTag*".execute() | 'head -n 1'.execute()
    p.waitFor()
    def tag = p.text.trim()
    return tag
}

def isSnapshotBuild = { ->
    def hasModifiedDeletedOrOtherFiles = !'git ls-files -mdo --exclude-standard'.execute().text.trim().isEmpty()
    def hasStagedFiles = !'git diff-index --no-ext-diff --name-only --cached HEAD'.execute().text.trim().isEmpty()
    def hasAdditionalCommits = getGitDescribe().contains('-')
    hasModifiedDeletedOrOtherFiles || hasStagedFiles || hasAdditionalCommits
}

// Method to expose the Version class, so that it can be invoked from each module
def getVersion(gitDescribe, isSnapshot) {
    return Version.from(gitDescribe, isSnapshot)
}

class Version {
    Integer major, minor, patch, hotfix, commits
    Boolean isSnapshot

    static def from(gitDescribe, isSnapshot) {

        def matcher = gitDescribe =~ '(\\d+)\\.(\\d+)\\.(\\d+)\\.?(\\d+)?(-\\d+)?'
        if (matcher) {
            def major = matcher.group(1).toInteger()
            def minor = matcher.group(2).toInteger()
            def patch = matcher.group(3).toInteger()
            def hotfix = matcher.group(4) ? matcher.group(4).toInteger() : 0;
            def commits = matcher.group(5) ? matcher.group(5).toInteger().abs() : 0
            new Version(major: major, minor: minor, patch: patch, hotfix: hotfix, commits: commits, isSnapshot: isSnapshot)
        } else {
            new Version(major: 0, minor: 0, patch: 0, hotfix: 0, commits: 1, isSnapshot: false)
        }
    }

    Integer getCode() {
        major * 100000 + minor * 10000 + patch * 1000 + hotfix * 100 + commits
    }

    String getName() {
        def adjustedPatch = isSnapshot ? patch + 1 : patch
        def suffix = isSnapshot ? '-SNAPSHOT' : ''

        if (hotfix != 0) {
            String.format('%d.%d.%d.%d%s', major, minor, adjustedPatch, hotfix, suffix)
        } else {
            String.format('%d.%d.%d%s', major, minor, adjustedPatch, suffix)
        }

    }

    String toString() {
        def suffix = isSnapshot ? '-SNAPSHOT' : ''

        if (hotfix != 0) {
            String.format('%d.%d.%d.%d-%d%s', major, minor, patch, hotfix, commits, suffix)
        } else {
            String.format('%d.%d.%d-%d%s', major, minor, patch, commits, suffix)
        }
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'http://nexus.hrbing.com/nexus/content/repositories/snapshots' }
        maven { url 'D:/hrbing/Repo'}
    }
    configurations.all {
        resolutionStrategy {
            // Resolve version conflict with Google libraries from external libraries
            // by forcing to the app's supported version
            // TODO Delete after bumping targetSdkVersion to be >= modules and WSDK
            force "com.android.support:support-v4:${supportLibVersion}",
                    "com.android.support:support-v13:${supportLibVersion}",
                    "com.android.support:appcompat-v7:${supportLibVersion}",
                    "com.android.support:support-annotations:${supportLibVersion}",
                    "com.android.support:design:${supportLibVersion}",
                    "com.android.support:gridlayout-v7:${supportLibVersion}",
                    "com.android.support:recyclerview-v7:${supportLibVersion}",
                    "com.android.support:cardview-v7:${supportLibVersion}",
                    "com.android.support:customtabs:${supportLibVersion}",
                    "com.android.support:multidex:${multiDexVersion}"
        }
    }
    ext.androidVersion = Version.from(getGitDescribe(), isSnapshotBuild())
    version = ext.androidVersion.getName()
    group = 'com.hrbing.android'
}

def addPomDependencies(it, dependenciesNode, variantName) {
    def dependencyNode = dependenciesNode.appendNode('dependency')

    // special case for local Module aar
    dependencyNode.appendNode('groupId', (it.group != null) ? it.group : it.name.startsWith('hrbing-') ? group : "unknown")
    if (it.group != 'com.hrbing.android' || it.name.startsWith('wallet-sdk-') || it.name.startsWith('ui-components') || it.name.startsWith('hrbing-authconnect') || it.name.startsWith('contactless-reader')) {
        dependencyNode.appendNode('artifactId', it.name)
    } else {
        // map project dependency to the build variant
        dependencyNode.appendNode('artifactId', "${it.name}-${variantName}")
    }

    // special case for local Module aar
    dependencyNode.appendNode('version', (it.version != null) ? it.version : it.name.startsWith('hrbing-') ? version : "unknown")
    dependencyNode.appendNode('scope', (it.group != null) ? 'compile' : 'provided')
}

def addbuildVariantPomDependencies(it, dependenciesNode) {
    def dependencyNode = dependenciesNode.appendNode('dependency')

    // special case for local Module aar
    dependencyNode.appendNode('groupId', (it.group != null) ? it.group : it.name.startsWith('hrbing-') ? group : "unknown")
    if (it.group != 'com.hrbing.android' || it.name.startsWith('wallet-sdk-') || it.name.startsWith('ui-components') || it.name.startsWith('hrbing-authconnect') || it.name.startsWith('contactless-reader')) {
        dependencyNode.appendNode('artifactId', it.name)
    } else {
        // map project dependency to the build variant
        dependencyNode.appendNode('artifactId', "${it.name}")
    }

    // special case for local Module aar
    dependencyNode.appendNode('version', (it.version != null) ? it.version : it.name.startsWith('hrbing-') ? version : "unknown")
    dependencyNode.appendNode('scope', (it.group != null) ? 'compile' : 'provided')
}

ext {
    compileSdkVersion = 26
    minSdkVersion = 17
    targetSdkVersion = 26
    supportLibVersion = "26.1.0"
    multiDexVersion = "1.0.2"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

// ./gradlew --no-daemon clean assembleGoogleDebug publishToMavenLocal -PCI=WSDK -PcustomVersionSuffix=1234
// ./gradlew --no-daemon clean assembleGoogleDebug publishToMavenLocal -PCI=Modules -PcustomVersionSuffix=1234
if(project.hasProperty('CI')) {
    println "******* CI Modules Build ********"
    if(!project.hasProperty('customVersionSuffix')) {
        throw new InvalidUserDataException('CI is not run with the right properties.Please provide customVersionSuffix')
    }
    else {
        if('WSDK'.equalsIgnoreCase(project.property('CI'))) {
            println "Running WSDK build"
            allprojects {
                repositories {
                    def local = mavenLocal()
                    remove local
                    addFirst local
                }
            }
            ext.walletSdkVersion = project.property('customVersionSuffix')
        }
        subprojects {
            version = project.property('customVersionSuffix')
        }
    }
}
